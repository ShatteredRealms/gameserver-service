// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/gameserver-service/pkg/pb/dimension.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/sro/git/gameserver-service/pkg/pb/dimension.pb.go -destination=/home/wil/sro/git/gameserver-service/pkg/pb/mocks/dimension.pb.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockisEditDimensionRequest_OptionalName is a mock of isEditDimensionRequest_OptionalName interface.
type MockisEditDimensionRequest_OptionalName struct {
	ctrl     *gomock.Controller
	recorder *MockisEditDimensionRequest_OptionalNameMockRecorder
	isgomock struct{}
}

// MockisEditDimensionRequest_OptionalNameMockRecorder is the mock recorder for MockisEditDimensionRequest_OptionalName.
type MockisEditDimensionRequest_OptionalNameMockRecorder struct {
	mock *MockisEditDimensionRequest_OptionalName
}

// NewMockisEditDimensionRequest_OptionalName creates a new mock instance.
func NewMockisEditDimensionRequest_OptionalName(ctrl *gomock.Controller) *MockisEditDimensionRequest_OptionalName {
	mock := &MockisEditDimensionRequest_OptionalName{ctrl: ctrl}
	mock.recorder = &MockisEditDimensionRequest_OptionalNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisEditDimensionRequest_OptionalName) EXPECT() *MockisEditDimensionRequest_OptionalNameMockRecorder {
	return m.recorder
}

// isEditDimensionRequest_OptionalName mocks base method.
func (m *MockisEditDimensionRequest_OptionalName) isEditDimensionRequest_OptionalName() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isEditDimensionRequest_OptionalName")
}

// isEditDimensionRequest_OptionalName indicates an expected call of isEditDimensionRequest_OptionalName.
func (mr *MockisEditDimensionRequest_OptionalNameMockRecorder) isEditDimensionRequest_OptionalName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEditDimensionRequest_OptionalName", reflect.TypeOf((*MockisEditDimensionRequest_OptionalName)(nil).isEditDimensionRequest_OptionalName))
}

// MockisEditDimensionRequest_OptionalVersion is a mock of isEditDimensionRequest_OptionalVersion interface.
type MockisEditDimensionRequest_OptionalVersion struct {
	ctrl     *gomock.Controller
	recorder *MockisEditDimensionRequest_OptionalVersionMockRecorder
	isgomock struct{}
}

// MockisEditDimensionRequest_OptionalVersionMockRecorder is the mock recorder for MockisEditDimensionRequest_OptionalVersion.
type MockisEditDimensionRequest_OptionalVersionMockRecorder struct {
	mock *MockisEditDimensionRequest_OptionalVersion
}

// NewMockisEditDimensionRequest_OptionalVersion creates a new mock instance.
func NewMockisEditDimensionRequest_OptionalVersion(ctrl *gomock.Controller) *MockisEditDimensionRequest_OptionalVersion {
	mock := &MockisEditDimensionRequest_OptionalVersion{ctrl: ctrl}
	mock.recorder = &MockisEditDimensionRequest_OptionalVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisEditDimensionRequest_OptionalVersion) EXPECT() *MockisEditDimensionRequest_OptionalVersionMockRecorder {
	return m.recorder
}

// isEditDimensionRequest_OptionalVersion mocks base method.
func (m *MockisEditDimensionRequest_OptionalVersion) isEditDimensionRequest_OptionalVersion() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isEditDimensionRequest_OptionalVersion")
}

// isEditDimensionRequest_OptionalVersion indicates an expected call of isEditDimensionRequest_OptionalVersion.
func (mr *MockisEditDimensionRequest_OptionalVersionMockRecorder) isEditDimensionRequest_OptionalVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEditDimensionRequest_OptionalVersion", reflect.TypeOf((*MockisEditDimensionRequest_OptionalVersion)(nil).isEditDimensionRequest_OptionalVersion))
}

// MockisEditDimensionRequest_OptionalLocation is a mock of isEditDimensionRequest_OptionalLocation interface.
type MockisEditDimensionRequest_OptionalLocation struct {
	ctrl     *gomock.Controller
	recorder *MockisEditDimensionRequest_OptionalLocationMockRecorder
	isgomock struct{}
}

// MockisEditDimensionRequest_OptionalLocationMockRecorder is the mock recorder for MockisEditDimensionRequest_OptionalLocation.
type MockisEditDimensionRequest_OptionalLocationMockRecorder struct {
	mock *MockisEditDimensionRequest_OptionalLocation
}

// NewMockisEditDimensionRequest_OptionalLocation creates a new mock instance.
func NewMockisEditDimensionRequest_OptionalLocation(ctrl *gomock.Controller) *MockisEditDimensionRequest_OptionalLocation {
	mock := &MockisEditDimensionRequest_OptionalLocation{ctrl: ctrl}
	mock.recorder = &MockisEditDimensionRequest_OptionalLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisEditDimensionRequest_OptionalLocation) EXPECT() *MockisEditDimensionRequest_OptionalLocationMockRecorder {
	return m.recorder
}

// isEditDimensionRequest_OptionalLocation mocks base method.
func (m *MockisEditDimensionRequest_OptionalLocation) isEditDimensionRequest_OptionalLocation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isEditDimensionRequest_OptionalLocation")
}

// isEditDimensionRequest_OptionalLocation indicates an expected call of isEditDimensionRequest_OptionalLocation.
func (mr *MockisEditDimensionRequest_OptionalLocationMockRecorder) isEditDimensionRequest_OptionalLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEditDimensionRequest_OptionalLocation", reflect.TypeOf((*MockisEditDimensionRequest_OptionalLocation)(nil).isEditDimensionRequest_OptionalLocation))
}
