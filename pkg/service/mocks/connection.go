// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/gameserver-service/pkg/service/connection.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/sro/git/gameserver-service/pkg/service/connection.go -destination=/home/wil/sro/git/gameserver-service/pkg/service/mocks/connection.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gameserver "github.com/ShatteredRealms/gameserver-service/pkg/model/gameserver"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionService is a mock of ConnectionService interface.
type MockConnectionService struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionServiceMockRecorder
	isgomock struct{}
}

// MockConnectionServiceMockRecorder is the mock recorder for MockConnectionService.
type MockConnectionServiceMockRecorder struct {
	mock *MockConnectionService
}

// NewMockConnectionService creates a new mock instance.
func NewMockConnectionService(ctrl *gomock.Controller) *MockConnectionService {
	mock := &MockConnectionService{ctrl: ctrl}
	mock.recorder = &MockConnectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionService) EXPECT() *MockConnectionServiceMockRecorder {
	return m.recorder
}

// CheckPlayerConnection mocks base method.
func (m *MockConnectionService) CheckPlayerConnection(ctx context.Context, id *uuid.UUID, serverName string) (*gameserver.PendingConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPlayerConnection", ctx, id, serverName)
	ret0, _ := ret[0].(*gameserver.PendingConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPlayerConnection indicates an expected call of CheckPlayerConnection.
func (mr *MockConnectionServiceMockRecorder) CheckPlayerConnection(ctx, id, serverName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPlayerConnection", reflect.TypeOf((*MockConnectionService)(nil).CheckPlayerConnection), ctx, id, serverName)
}

// CreatePendingConnection mocks base method.
func (m *MockConnectionService) CreatePendingConnection(ctx context.Context, characterId, serverName string) (*gameserver.PendingConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingConnection", ctx, characterId, serverName)
	ret0, _ := ret[0].(*gameserver.PendingConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePendingConnection indicates an expected call of CreatePendingConnection.
func (mr *MockConnectionServiceMockRecorder) CreatePendingConnection(ctx, characterId, serverName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingConnection", reflect.TypeOf((*MockConnectionService)(nil).CreatePendingConnection), ctx, characterId, serverName)
}
